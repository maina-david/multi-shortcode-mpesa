<?php

namespace MainaDavid\MultiShortcodeMpesa\traits;

use David\MultiShortcodeMpesa\Models\ShortCode;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\File;

/**
 * 
 */
trait MpesaHelper
{
    /**
     * It takes a phone number, checks if it starts with a +, 0 or 7 and returns a phone number in the
     * format of 254XXXXXXXXX
     * 
     * @param phonenumber The phone number to be validated.
     * 
     * @return the phone number after it has been validated.
     */
    public function phoneNumberValidator($phonenumber)
    {
        $phonenumber = (substr($phonenumber, 0, 1) == "+") ? str_replace("+", "", $phonenumber) : $phonenumber;
        $phonenumber = (substr($phonenumber, 0, 1) == "0") ? preg_replace("/^0/", "254", $phonenumber) : $phonenumber;
        $phonenumber = (substr($phonenumber, 0, 1) == "7") ? "254{$phonenumber}" : $phonenumber;

        return $phonenumber;
    }

    /**
     * It takes in a shortcode and a passkey and returns a base64 encoded string of the shortcode, passkey
     * and timestamp
     * 
     * @param shortcode The shortcode of the business paying the bill.
     * @param passkey The passkey is a secret key that is generated by Safaricom. You can get it from the
     * Daraja portal.
     * 
     * @return A base64 encoded string
     */
    public function LipaNaMpesaPassword($shortcode, $passkey)
    {
        $timestamp = Carbon::rawParse('now')->format('YmdHms');
        return base64_encode($shortcode . $passkey . $timestamp);
    }

    /**
     * It takes the password and encrypts it using the public key
     * 
     * @param environment sandbox or production
     * @param password The password you want to encrypt.
     * 
     * @return The encrypted password.
     */
    public function generate_security_credentials($environment, $password)
    {
        if ($environment == 'sandbox') {
            $pubkey = File::get(__DIR__ . '/../certificates/SandboxCertificate.cer');
        } else {
            $pubkey = File::get(__DIR__ . '/../certificates/ProductionCertificate.cer');
        }
        openssl_public_encrypt($password, $output, $pubkey, OPENSSL_PKCS1_PADDING);
        return base64_encode($output);
    }
}